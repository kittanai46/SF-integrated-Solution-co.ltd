import 'package:crimes/config/app_constant.dart';
import 'package:crimes/data/client/api_client.dart';
import 'package:crimes/data/dto/profile/notify_dto.dart';
import 'package:crimes/data/entity/refresh_event.dart';
import 'package:crimes/main.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:crimes/data/client/response/auth/policestation_response_dto.dart';
import 'package:crimes/data/client/response/profile/news_response_dto.dart';
import 'package:crimes/data/client/response/common_response_dto.dart';
import 'package:crimes/data/dto/profile/favorite_dto.dart';
import 'package:crimes/data/dto/profile/news_dto.dart';
import 'package:crimes/data/dto/profile/user_dto.dart';
import 'package:crimes/data/dto/profile/policestation_dto.dart';
import 'package:crimes/resource/app_message.dart';
import 'package:crimes/screen/search/param_scope.dart';
import 'package:crimes/util/key_utils.dart';
import 'package:crimes/util/string_utils.dart';
import 'package:dio/dio.dart';
import 'package:flutter/services.dart';
import 'package:gson/gson.dart';
import 'package:local_auth/local_auth.dart';
import 'package:mobx/mobx.dart';
import 'package:crimes/screen/action_status.dart';
import 'dart:typed_data';
import 'dart:convert';
import 'package:geolocator/geolocator.dart';
import 'package:crimes/util/device_infomation_utils.dart';
import 'package:crimes/data/dto/profile/eula_dto.dart';

part 'main_screen_view_model.g.dart';

class MainScreenViewModel = MainScreenViewModelBase with _$MainScreenViewModel;

abstract class MainScreenViewModelBase with Store {
  MainScreenViewModelBase();

  final LocalAuthentication auth = LocalAuthentication();
  Uint8List newsBytes1 = base64Decode("");
  String newsURL1 = "http://www.crimespolice.com/portal/#";
  Uint8List newsBytes2 = base64Decode("");
  String newsURL2 = "http://www.crimespolice.com/portal/%e0%b8%81%e0%b8%b2%e0%b8%a3%e0%b8%9d%e0%b8%b6%e0%b8%81%e0%b8%ad%e0%b8%9a%e0%b8%a3%e0%b8%a1%e0%b8%81%e0%b8%b2%e0%b8%a3%e0%b9%83%e0%b8%8a%e0%b9%89%e0%b8%87%e0%b8%b2%e0";
  Uint8List newsBytes3 = base64Decode("");
  String newsURL3 = "http://www.crimespolice.com/portal/%e0%b8%a8%e0%b8%b2%e0%b8%a5-%e0%b8%95%e0%b8%a3-%e0%b8%84%e0%b8%b7%e0%b8%9a%e0%b8%ab%e0%b8%99%e0%b9%89%e0%b8%b2-%e0%b8%88%e0%b8%b1%e0%b8%9a%e0%b8%a1%e0%b8%b7%e0%b8%ad";

  List<NewsDto> listNews = [];
  UserDto? userDto;
  EulaDto? eulaDto;
  String? passcode;
  String? baseUrl;
  String? url;
  String version="";
  String buildnumber="";
  ListNewsDto? listNewsDto;
  ListPoliceStationDto? listPoliceStationDto;
  Position lastPosition = Position(longitude: 0,latitude: 0, timestamp: DateTime.now(), accuracy: 0.0, altitude: 0.0, heading: 0.0, speed: 0.0, speedAccuracy: 0.0, altitudeAccuracy: 0.0, headingAccuracy: 0.0); // initial with 0,0

  // FavoriteDto defaultFavorite;
  @observable List<FavoriteDto> favoriteList = [];
  @observable bool hasBiometrics = false;
  @observable bool isEnableBiometrics = false;
  @observable bool isEnableFavButton = false;
  // @observable bool hasNewNotification = false;

  @observable int countNew = 0;
  @observable List<NotifyDto> notifications = [];

  // final int MAX_TIME_SECOND = 5;  // 5 seconds
  // int _timeLeftSecond = 0;
  // String _reference = '';
  // bool stopTime = false;
  // bool onPingSocError = false;
  // bool onPingSocSuccess = false;


  @observable String successMessage = '';
  String? thaidState;
  String? thaidHost;
  String? thaidPoliceID= "";
  String? thaidStatus= "";
  String? thaidMessage= "";

  double? lastedLat = 0;
  double? lastedLon = 0;
  String? stationName = "";
  String? stationAddr = "";

  @action
  Future<void> getNotify() async {
    notifications.clear();
    // status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().getNotify();
      notifications = response.listNotifyDto!.data!;
      notifications.sort((a, b) => _convertReadDateSort(b.createdDateSort!).compareTo(_convertReadDateSort(a.createdDateSort!)));

      int count = 0;
      for(int i=0;i<notifications.length;i++){
        final notify = notifications[i];
        if(notify.readFlag=='false') count++;
      }
      countNew = count;

      // status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  int _convertReadDateSort(String readDateSort) {
    if(readDateSort == null || readDateSort.isEmpty) return DateTime.now().millisecondsSinceEpoch;
    // 25640228 18:16
    String hour = readDateSort.substring(readDateSort.indexOf(' ')+1, readDateSort.indexOf(':'));
    String min = readDateSort.substring(readDateSort.indexOf(':')+1);
    String dateWithT = "${readDateSort.substring(0, 8)}T${hour}${min}00";
    DateTime dateTime = DateTime.parse(dateWithT);
    return dateTime.millisecondsSinceEpoch;
  }


  @action
  void setUserDto(UserDto dto) {
    userDto = dto;

    // // TODO: Set default search person with only pid
    // List<String> choices = List<String>();
    // choices.add(AppConstant.showFormIdCard);
    //
    // List<String> innerDbs = List<String>();
    // innerDbs.add(AppConstant.dbInnerPersonHasAya);
    // innerDbs.add(AppConstant.dbInnerPersonHasTraffic);
    // List<String> outerDbs = List<String>();
    // defaultFavorite = FavoriteDto(category: AppConstant.kSearchPerson, title: "ค้นหาหมายจับ ด้วยบัตรปชช", choices: choices, innerDbs: innerDbs, outerDbs: outerDbs,);
  }

  @action
  Future<void> refreshFavoriteList() async {
    StringUtils.log(".. refreshFavoriteList");
    favoriteList = await KeyUtils.getFavoriteList();
    while(favoriteList.length > 5){
      favoriteList.removeLast();
    }
  }

  @action
  Future<void> refreshCanAddFavorite() async{
    final favoriteList = await KeyUtils.getFavoriteList();
    isEnableFavButton = favoriteList.length < AppConstant.maxFavorite;
  }

  @action
  Future<void> generatePasscode() async {
    if(status == ActionStatus.inProgress) return;

    status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().generatePasscode();
      passcode = response.passcode;
      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  @action
  Future<void> getTokenAuthSoc() async {
    if(status == ActionStatus.inProgress) return;

    status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().getTokenAuthSoc();
      baseUrl = response.baseUrl;
      url = response.url;
      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  @action
  Future<void> pingUrl() async {
    status = ActionStatus.inProgress;
    try {
      StringUtils.log("_pingUrl ==> , ${baseUrl}");
      // startTimer();
      await ApiClient().pingUrl(baseUrl!);
      status = ActionStatus.success;
      // if(onPingSocError){
      //   resetStatus();
      // }else{
      //   onPingSocSuccess = true;
      //   status = ActionStatus.success;
      // }
    } on Exception catch (obj) {
      status = ActionStatus.error;
      // if(onPingSocError){
      //   resetStatus();
      // }else{
      //   status = ActionStatus.error;
      // }
    }
  }

  // Future<void> startTimer() async{
  //   onPingSocError = false;
  //   onPingSocSuccess = false;
  //   _timeLeftSecond = MAX_TIME_SECOND;
  //   _reference = KeyUtils.createCryptoRandomString();
  //   await _updateTime(_reference);
  // }
  //
  // Future<void> _updateTime(String ref) async {
  //   if(ref != _reference) return;
  //   if(stopTime) return;
  //
  //   await Future.delayed(Duration(seconds: 1));
  //   _timeLeftSecond--;
  //
  //   if(_timeLeftSecond > 0){
  //     await _updateTime(ref);
  //   }else if(!stopTime && !onPingSocSuccess){
  //     stopTime = true;
  //     onPingSocError = true;
  //     resetStatus();
  //     eventBus.fire(PingSocErrorEvent());
  //   }else if(onPingSocSuccess){
  //     stopTime = true;
  //   }
  // }

  @action
  Future<void> requestUpdatePushToken(String pushToken) async {
    try {
      await ApiClient().updatePushToken(pushToken);
    } on Exception catch (obj) {
    }
  }

  @action
  Future<void> refreshBiometrics() async {
    hasBiometrics = await checkBiometricsAvailable();
    final isBiometricsTokenAvailable = await KeyUtils.isBiometricsTokenAvailable();
    String biometricsToken = await KeyUtils.getBiometricsToken();
    if(biometricsToken == null) biometricsToken = '';

    if(hasBiometrics && isBiometricsTokenAvailable && biometricsToken != AppConstant.tempBiometrics){
      isEnableBiometrics = true;
    }else{
      isEnableBiometrics = false;
    }
  }

  Future<bool> checkBiometricsAvailable() async {
    bool hasBiometrics = false;
    try {
      bool canCheckBiometrics = await auth.canCheckBiometrics;
      if(canCheckBiometrics) {
        final listBiometrics = await auth.getAvailableBiometrics();
        if(listBiometrics.length > 0){
          hasBiometrics = true;
        }
      }
    } on PlatformException catch (e) {
      StringUtils.log('${e.message}');
    }
    return hasBiometrics;
  }

  @action
  Future<void> closeBiometrics() async {
    final biometricsToken = AppConstant.tempBiometrics;

    status = ActionStatus.inProgress;
    try {
      await ApiClient().changeBiometrics(biometricsToken);
      await KeyUtils.saveBiometricsToken(biometricsToken);
      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  @action
  Future<void> authenticate() async {
    resetStatus();
    bool authenticated = false;
    try {
      // authenticated = await auth.canCheckBiometricsauthenticateWithBiometrics(
      //     localizedReason: 'Please authenticate',
      //     useErrorDialogs: true,
      //     stickyAuth: true);

      authenticated = await auth.canCheckBiometrics;

    } on PlatformException catch (e) {
      StringUtils.log('${e.message}');
    }

    if(authenticated) {
      await _changeBiometricToken();
    }
  }

  Future<void> _changeBiometricToken() async{
    final biometricsToken = KeyUtils.createCryptoRandomString();

    status = ActionStatus.inProgress;
    try {
      await ApiClient().changeBiometrics(biometricsToken);
      await KeyUtils.saveBiometricsToken(biometricsToken);
      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  Future<List<NewsDto>> getNews() async{
    // status = ActionStatus.inProgress;
    NewsResponseDto newsResponseDto = NewsResponseDto();
    List<NewsDto> response = [];
    try {
      newsResponseDto = await ApiClient().getNews();
      if(newsResponseDto.listNewsDto!=null){
        response = newsResponseDto.listNewsDto!.data!;
        //listNews = response;
      }
    } on Exception catch (obj) {
      await _handleException(obj);
    }
    return response;
  }

  Future<void> getVersionInfo() async{
    // status = ActionStatus.inProgress;
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    version = packageInfo.version;
    buildnumber=packageInfo.buildNumber;
    print("get version => "+version+" "+buildnumber);
  }

  Future<void> getPoliceStation() async{
    status = ActionStatus.inProgress;
    PoliceStationResponseDto policeStationResponseDto = PoliceStationResponseDto();
    try {
      policeStationResponseDto = await ApiClient().getPoliceStationList();
      this.listPoliceStationDto = policeStationResponseDto.listPoliceStationDto;
      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  Future<void> checkGPS() async{
    // status = ActionStatus.inProgress;

    openGPSDisabled = false;
    try {
      lastPosition = await DeviceInformationUtils.determinePosition();
    }catch(e){
      StringUtils.log("determinePosition Error "+e.toString());
      openGPSDisabled=true;
      // status = ActionStatus.error;
    };
    // if(openGPSDisabled == false) {
    //   status = ActionStatus.success;
    // }
  }

  Future<void> getEula() async {
    status = ActionStatus.inProgress;
    try {
      final eulaResponse = await ApiClient().getEula();
      final listEulaDto = eulaResponse.listEulaDto;
      if(listEulaDto!=null && listEulaDto.data!=null && listEulaDto.data!.length>0){
        eulaDto = listEulaDto.data![0];
      }
      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  // ------------ COMMON ---------------

  @observable ActionStatus status = ActionStatus.idle;
  @observable String errorTitle = '';
  @observable String? errorMessage = '';
  @observable bool showError = false;

  bool openLogin = false;
  bool openWaitSMS = false;
  bool openWaitAdmin = false;
  bool openRegisterPin = false;
  bool openRegisterBiometrics = false;
  bool openGPSDisabled = false;
  bool openVerifyPin = false;

  @action
  void resetStatus() {
    status = ActionStatus.idle;
    showError = false;
  }

  Future<void> _handleException(Object obj) async{
    switch (obj.runtimeType) {
      case DioError:
        final type = (obj as DioError).type;
        if(type == DioErrorType.connectionTimeout){
          showError = true;
          errorTitle = AppMessage.error;
          errorMessage = AppMessage.connectedTimeout;

        }else {
          final response = (obj as DioError).response;
          final statusCode = response!.statusCode!;

          if(statusCode>=400 && statusCode<500){
            final responseDto = CommonResponseDto.fromJson(
                gsonDecode(response.data.toString()));
            errorTitle = AppMessage.error;
            errorMessage = responseDto.message;

            if (statusCode == 400) {
              showError = true;
            } else if (statusCode == 401) {
              await KeyUtils.clearAll();
              openLogin = true;
            } else if (statusCode == 402) {
              openWaitSMS = true;
            } else if (statusCode == 403) {
              openWaitAdmin = true;
            } else if (statusCode == 404) {
              openRegisterPin = true;
            } else if (statusCode == 405) {
              openRegisterBiometrics = true;
            } else if (statusCode == 406) {
              openVerifyPin = true;
            }
          }else {
            showError = true;
            errorTitle = AppMessage.error;
            errorMessage = AppMessage.pleaseTryAgain;
          }
        }

        break;
      default:
        showError = true;
        errorTitle = AppMessage.error;
        errorMessage = AppMessage.pleaseTryAgain;
        break;
    }
    status = ActionStatus.error;
  }


  @action
  Future<void> generateThaIDState() async {

    if(status == ActionStatus.inProgress) return;
    status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().generateThaIDState();

      thaidState = response.thaidState;
      thaidHost = response.thaidHost;
      successMessage = response.message!;
      StringUtils.log("-- thaIDState: $thaidState");
      StringUtils.log("-- thaIDHost: $thaidHost");

      status = ActionStatus.success;

    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  @action
  Future<void> getThaiIDScope() async{
    final thaidstate = await KeyUtils.getThaidState();
    status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().getThaIDScope(thaidstate);  //Check Authenticate api
      thaidPoliceID = response.thaidPoliceID;
      thaidStatus = response.thaidStatus;
      thaidMessage= response.thaidMessage;
      StringUtils.log("thaidPoliceID "+thaidPoliceID!);
      StringUtils.log("thaidStatus "+thaidStatus!);
      StringUtils.log("thaidMessage "+thaidMessage!);

      if(response.thaidStatus!.isNotEmpty && response.thaidStatus=='success'){
        status = ActionStatus.success;
        KeyUtils.saveUsername(thaidPoliceID!);
      }else{
        status = ActionStatus.error;
        errorMessage = response.thaidMessage!;
      }
    } on Exception catch (obj) {
      thaidPoliceID = "";
      thaidStatus = "";
      thaidMessage= "";
      await _handleException(obj);
    }
  }

  @action
  Future<void> renewThaiIDCrimesOnline(String thaidCode,String thaidState) async{
    status = ActionStatus.inProgress;
    try {
      // KeyPair keyPair = await KeyUtils.generateKeyPair();
      // _clientPublicKey = Base64Encoder().convert(keyPair.pk);
      // _clientSecretKey = Base64Encoder().convert(keyPair.sk);
      // StringUtils.log("-- clientPublicKey: $_clientPublicKey");
      // StringUtils.log("-- clientSecretKey: $_clientSecretKey");

      final response = await ApiClient().renewThaIDCrimesOnline(
        thaidState,//Thaid State
        thaidCode,//Thaid Code
      );

      StringUtils.log('renewThaIDCrimesOnline response.status: ${response.status}');
      StringUtils.log('renewThaIDCrimesOnline response.Message: ${response.message}');
      if(response.status!.isNotEmpty && response.status=='success'){
        status = ActionStatus.success;
        successMessage = response.message!;
        //_serverPublicKey = response.key;
        successMessage = response.message!;
        thaidStatus = response.status;
        thaidMessage=response.message;
        // StringUtils.log("-- serverPublicKey: $_serverPublicKey");
        // StringUtils.log("-- thaidPoliceID: "+response.thaidPoliceID!);
        // await KeyUtils.saveUsername(response.thaidPoliceID!);
        // await KeyUtils.saveKeys(_clientPublicKey!, _clientSecretKey!, _serverPublicKey!);
      }else{
        status = ActionStatus.error;
        errorMessage = response.message!;
      }

    } on Exception catch (obj) {
      thaidStatus = "";
      thaidMessage= "";
      await _handleException(obj);
    }
  }

  Future<bool> _checkBiometrics() async {
    bool canCheckBiometrics = false;
    try {
      canCheckBiometrics = await auth.canCheckBiometrics;
    } on PlatformException catch (e) {
      StringUtils.log('${e.message}');
    }
    return canCheckBiometrics;
  }

  Future<bool> _getAvailableBiometrics() async {
    List<BiometricType> availableBiometrics;
    bool isFingerPrintAvailable = false;
    bool isFaceIdAvailable = false;
    try {
      availableBiometrics = await auth.getAvailableBiometrics();

      isFingerPrintAvailable = availableBiometrics.contains(BiometricType.fingerprint);
      isFaceIdAvailable = availableBiometrics.contains(BiometricType.face);

    } on PlatformException catch (e) {
      StringUtils.log('${e.message}');
    }
    return isFingerPrintAvailable || isFaceIdAvailable;
  }

  @action
  Future<void> generateThaIDStateLK2() async {

    if(status == ActionStatus.inProgress) return;
    status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().generateThaIDStateLK2();

      thaidState = response.thaidState;
      thaidHost = response.thaidHost;
      successMessage = response.message!;
      StringUtils.log("-- thaIDState: $thaidState");
      StringUtils.log("-- thaIDHost: $thaidHost");

      status = ActionStatus.success;

    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  @action
  Future<void> loginConfirmLK2(String thaidCode,String thaidState,String authen) async{
    status = ActionStatus.inProgress;
    try {
      final response = await ApiClient().loginConfirmLK2(
        thaidState,//Thaid State
        thaidCode,//Thaid Code
      );

      StringUtils.log('loginConfirmLK2 response.status: ${response.status}');
      StringUtils.log('loginConfirmLK2 response.Message: ${response.message}');
      if(response.status!.isNotEmpty && response.status=='success'){
        status = ActionStatus.success;
        successMessage = response.message!;
        successMessage = response.message!;
        thaidStatus = response.status;
        thaidMessage=response.message;

      }else{
        status = ActionStatus.error;
        errorMessage = response.message!;
      }

    } on Exception catch (obj) {
      thaidStatus = "";
      thaidMessage= "";
      await _handleException(obj);
    }
  }

  @action
  Future<void> getNearestPoliceStation() async {
    try {
      status = ActionStatus.inProgress;
      Position position = await DeviceInformationUtils.determinePosition();

      final response = await ApiClient().getNearestPoliceStation('${position.latitude}', '${position.longitude}');
      if(response.lat!=null && response.lat!.isNotEmpty && response.lon!=null && response.lon!.isNotEmpty){
        lastedLat = double.tryParse(response.lat!);
        lastedLon = double.tryParse(response.lon!);
        stationName = response.name;
        stationAddr = response.address;
      }

      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

  @action
  Future<void> getResponsiblePoliceStation() async {
    try {
      status = ActionStatus.inProgress;
      Position position = await DeviceInformationUtils.determinePosition();

      final response = await ApiClient().getResponsiblePoliceStation('${position.latitude}', '${position.longitude}');
      if(response.lat!=null && response.lat!.isNotEmpty && response.lon!=null && response.lon!.isNotEmpty){
        lastedLat = double.tryParse(response.lat!);
        lastedLon = double.tryParse(response.lon!);
        stationName = response.name;
        stationAddr = response.address;
      }

      status = ActionStatus.success;
    } on Exception catch (obj) {
      await _handleException(obj);
    }
  }

}
